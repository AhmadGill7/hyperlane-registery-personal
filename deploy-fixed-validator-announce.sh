#!/bin/bash

# Deploy ValidatorAnnounce with the correct mailbox address
# Simple deployment without requiring source files

if [ -z "$HYP_KEY" ]; then
    echo "‚ùå Error: HYP_KEY environment variable is not set"
    exit 1
fi

CORRECT_MAILBOX="0xC505a8B225D46eB5252D96549C074e70855Fe4F3"
RPC_URL="https://rpc.kasplextest.xyz"

echo "üîß Deploying ValidatorAnnounce with correct mailbox..."
echo "Mailbox: $CORRECT_MAILBOX"
echo ""

# ValidatorAnnounce bytecode with constructor
# This is the compiled ValidatorAnnounce contract from Hyperlane
# Constructor parameter: address _mailbox

# Get validator address for display
VALIDATOR_ADDR=$(cast wallet address --private-key $HYP_KEY)
echo "Deploying from: $VALIDATOR_ADDR"
echo ""

# ValidatorAnnounce bytecode (creation code with constructor)
# This is the compiled ValidatorAnnounce contract from Hyperlane
# We'll encode the mailbox address directly in the deployment

# Encode constructor argument (mailbox address)
CONSTRUCTOR_ARGS=$(cast abi-encode "constructor(address)" $CORRECT_MAILBOX)

# Remove the 0x prefix from constructor args
CONSTRUCTOR_ARGS_NO_PREFIX="${CONSTRUCTOR_ARGS:2}"

# ValidatorAnnounce creation bytecode
BYTECODE="608060405234801561001057600080fd5b5060405161165938038061165983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6115c6806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f6578063c11f50ba14610116578063d79a824514610129578063f47c84c51461013c57600080fd5b80630ef0d89e146100825780632ba82f20146100975780633f9dc9e6146100ac575b600080fd5b610095610090366004610e84565b610144565b005b6100956100a5366004610efc565b5050565b6100956100ba366004610f50565b610370565b6100de6100d1366004610fcf565b6001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b600054610109906001600160a01b031681565b6040516100e59190610feb565b610109610124366004611024565b6104a1565b61013c61013736600461105e565b6105cc565b604051901515815260200160405180910390f35b610109610678565b60006040518060600160405280858152602001848152602001838152509050600061016e826106d5565b90506000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411156101fe578460405160200161020691815260200190565b60405160208183030381529060405280519060200120816002015414610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906110a5565b60405180910390fd5b61027083610747565b1561027d5761027d610f50565b60408051606081018252868152602081018690528101849052600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f5c15d6a5e9e55e05d1f0b47f4db1b1ebebdda7da5a9fa04df7c8c3e5b4c99a808787878760405161032c9493929190611120565b60405180910390a15050505050505050565b6001600160a01b03821661035c5761035c6111de565b61036682826107c7565b5050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c810182905260009060001981019061043b57507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90611214565b6040517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602082015260808301526068820152608881016040528091019061044c565b61044481610a3d565b9050806001600160a01b0316866001600160a01b031614610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e9061125a565b50505050505050565b6000806104ab8484610ac4565b9050801580156104bd57506104bd610b50565b156104cc575060009392505050565b6001600160a01b0384166000908152600260205260409020600101548114610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906112a0565b6001600160a01b038416600090815260026020526040902054915050929150505056fea26469706673582212209ca4c3f7e8f5c8e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e964736f6c63430008130033"

# Combine bytecode with constructor arguments
FULL_BYTECODE="0x${BYTECODE}${CONSTRUCTOR_ARGS_NO_PREFIX}"

echo "Deploying contract..."
echo ""

# Deploy the contract
TX_OUTPUT=$(cast send --rpc-url $RPC_URL --private-key $HYP_KEY --create $FULL_BYTECODE 2>&1)

echo "$TX_OUTPUT"

# Extract the deployed address
if echo "$TX_OUTPUT" | grep -q "contractAddress"; then
    VALIDATOR_ANNOUNCE=$(echo "$TX_OUTPUT" | grep "contractAddress" | awk '{print $2}')
    
    echo ""
    echo "‚úÖ ValidatorAnnounce deployed at: $VALIDATOR_ANNOUNCE"
    echo ""
    
    # Verify it's using the correct mailbox
    echo "Verifying mailbox address..."
    DEPLOYED_MAILBOX=$(cast call $VALIDATOR_ANNOUNCE "mailbox()(address)" --rpc-url $RPC_URL)
    echo "Contract's mailbox: $DEPLOYED_MAILBOX"
    echo "Expected mailbox:   $CORRECT_MAILBOX"
    
    if [ "$(echo $DEPLOYED_MAILBOX | tr '[:upper:]' '[:lower:]')" == "$(echo $CORRECT_MAILBOX | tr '[:upper:]' '[:lower:]')" ]; then
        echo "‚úÖ Mailbox verified correctly!"
    else
        echo "‚ùå Mailbox mismatch!"
        exit 1
    fi
    
    echo ""
    echo "üìù Next steps:"
    echo "1. Update kasplextestnet-config.json:"
    echo "   \"validatorAnnounce\": \"$VALIDATOR_ANNOUNCE\""
    echo ""
    echo "2. Update chains/kasplextestnet/addresses.yaml:"
    echo "   validatorAnnounce: \"$VALIDATOR_ANNOUNCE\""
    echo ""
    echo "3. Remove --disableAnnouncements and --allowLocalCheckpointSyncers from run-validator-kasplex.sh"
    echo ""
    echo "4. Restart your Kasplex validator"
else
    echo "‚ùå Deployment failed or could not parse contract address"
    echo "Please check the output above for errors"
    exit 1
fi
